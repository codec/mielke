// Code generated by go-bindata.
// sources:
// assets/index.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x57\x4d\x6f\xe3\x36\x10\xbd\xfb\x57\x4c\x55\x14\xd9\x05\x2c\xcb\xf6\xc6\x71\xac\xc8\x42\x8b\xdd\x16\x2d\xd0\x6d\x0b\x74\x7b\xe8\x91\x12\x47\x12\x1b\x8a\x14\x48\x2a\x8e\x6b\xf8\xbf\x17\xd4\xb7\x62\xc5\x1b\x14\x39\x48\x21\x67\xde\xbc\x79\x33\x14\xc7\xc1\x37\x9f\x7e\xff\xf8\xe5\xef\x3f\x7e\x84\xcc\xe4\x3c\x9c\x05\xf6\x01\x9c\x88\x74\xef\xa0\x70\xc2\xd9\x2c\xc8\x90\xd0\x70\x06\x10\x18\x66\x38\x86\x9f\x19\xf2\x47\xf4\x56\x8b\x65\xe0\xd5\x2b\x76\x2f\x47\x43\x20\xce\x88\xd2\x68\xf6\xce\x5f\x5f\x7e\x72\xef\x9d\x7e\x43\x90\x1c\xf7\xce\x13\xc3\x43\x21\x95\x71\x20\x96\xc2\xa0\x30\x7b\xe7\xc0\xa8\xc9\xf6\x14\x9f\x58\x8c\x6e\xf5\xcf\x1c\x98\x60\x86\x11\xee\xea\x98\x70\xdc\xaf\x6a\x18\x6d\x8e\x1c\xc1\x1c\x0b\xdc\x3b\x06\x9f\x8d\x17\x6b\x5d\xed\x00\xe4\x84\x09\x38\x55\xaf\x00\x15\x86\x0f\xb7\xf7\x0a\xf3\x87\x66\x2d\x27\x2a\x65\xc2\x87\x25\x90\xd2\xc8\x7a\xf5\x3c\xeb\x7c\xe7\xa0\x91\x63\x6c\x6c\xe4\xa2\x34\x73\x88\x4a\x63\x64\x0f\x99\x48\x61\x7c\x58\x58\x44\x6f\xa5\x30\x87\x9b\xcf\x28\xb8\xbc\x99\xc3\xcd\x27\x25\x19\x85\x3f\x89\xd0\xf0\x59\x8a\x6a\xe9\xa3\x2c\x15\x43\x05\xbf\xe1\xe1\x66\x0e\xb9\x14\x52\x17\x24\xc6\x51\x54\x8d\xb1\x61\x83\x08\x94\xe9\x82\x93\xa3\x0f\x09\xc7\xe7\x96\xf5\x3f\xa5\x36\x2c\x39\xba\x8d\x56\x3e\x54\x38\x6e\x84\xe6\x80\x28\x26\xf1\x42\xa0\xec\xa9\xe7\xcd\xf1\xd9\x87\x55\x8b\x57\x10\x4a\x99\x48\x7d\x58\x6c\x3a\x6d\x1a\xff\xef\x73\xa4\x8c\xc0\xbb\x9c\x3c\xbb\x43\x01\xdf\x77\x58\x23\x8d\x3b\x95\x77\xf7\xdf\xb5\xe8\xe7\xaf\xe0\xad\x6f\x47\x78\x3d\x63\xa2\x19\xc5\x4b\xe8\xd5\x72\x39\x8d\x5d\x17\x67\xde\x22\xcc\x81\x28\xc3\x62\x8e\x4d\xf5\x3a\xa4\x48\x2a\x8a\xca\x55\x84\xb2\x52\xfb\xb0\x58\x6f\x06\x1d\x21\x4b\xc3\x99\x40\x1f\x96\x0f\x23\xf3\xc1\x42\x2f\x57\xe5\x09\x8b\xed\x85\x6c\x4d\xe4\x81\x48\x75\x9f\x55\x4d\xb2\x1e\x84\x6b\xc1\x57\xc5\x33\x68\xc9\x19\x7d\xb8\xcc\xa8\x43\xb1\xdd\xed\x1a\x45\x84\x4e\xa4\xca\x7d\x28\x8b\x02\x55\x4c\x34\x3e\x0c\x0d\x08\x67\xa9\xf0\x21\x46\x61\x50\x0d\xd1\x16\x9c\xa8\xb4\xe7\xd4\xa5\x51\x91\xfa\x30\x20\x65\xdb\xda\xd5\xec\x5f\x6c\x7a\x7b\xc4\xc9\x90\x68\x90\x58\xa3\x65\x2c\x39\x27\x85\x46\x1f\xda\xb7\x87\xb7\x88\xdd\x6c\xda\xf6\xad\x98\x74\x12\x0f\x4a\x3d\x8a\x9d\xcd\xc1\xd0\xcb\x0c\x16\x43\xd0\xa1\x08\x1c\x13\x33\x92\xa0\x56\x65\xac\xe8\xeb\x82\x45\x92\xd3\xd1\x61\x77\x0f\xc8\xd2\xcc\xf8\xb0\x5b\x2e\x47\xaa\x2c\x28\x51\x8f\x6e\xaa\xc8\x71\xde\x31\x7d\x51\xbd\x88\xc4\x8f\xa9\x92\xa5\xa0\x56\x2e\xa9\x7c\xf8\xf6\x36\xd9\xdc\x6e\x76\xd3\x38\xae\xe5\xd6\x39\x5f\xf1\x78\xdd\xf8\x7e\x73\x4f\x77\x77\xe3\x16\xb0\xf4\x87\x3c\x95\x2f\x4c\xe6\xc6\x19\xe3\xf4\xdd\x5a\xb8\xab\xf7\xd7\xf8\xe2\x1a\x37\xb8\x7b\x05\xb0\xe2\xd0\x66\x7f\xc1\x65\xc2\x55\x21\xbd\x16\x2c\x49\xb6\xdb\xed\xfa\xa5\xc7\x74\xa6\x13\xb6\xa9\x42\xbc\x2a\xfe\xdd\x36\x22\x53\x3e\xd3\x11\x26\xac\x23\x5e\xe2\xb5\x00\xdb\x65\x44\xf1\xee\xc2\x65\x1a\x7f\xc2\xf8\x88\x9c\xcb\xc3\x75\x89\x28\xbd\xdb\x4d\x38\xbd\xa6\xd2\x85\x79\x4e\x52\x14\x86\x5c\x0b\x12\x25\xdb\x4d\x92\x4c\x79\x4d\x47\x99\xb0\x8f\x8f\xe4\x6a\x29\x76\xeb\x64\x97\xdc\x5d\xb8\x4c\xe3\x4f\x18\x47\x9c\xc4\x8f\xd7\x02\x7c\xd8\xd8\xbf\x4b\x9f\xe9\x08\x63\x6b\x6b\x1f\x78\xd5\x94\x11\xce\x02\xaf\x9e\x79\x66\x41\x24\xe9\xd1\x3e\xed\xfd\x57\xcf\x21\xcd\xc5\x15\x73\xa2\xf5\xde\xe9\x0f\x46\x33\x8c\x04\x94\x3d\x85\x41\xb6\x1a\x8d\x49\xd9\x2a\x0c\x3c\xbb\x51\x07\xa9\x21\x86\x70\x03\xdf\xd3\x09\x14\x11\x29\xc2\xe2\x57\xa6\x0d\x9c\xcf\x0d\xed\xa0\xbd\x6d\x18\xdd\x3b\xda\xb8\xa7\x13\x2c\x7e\x96\xda\xd8\xd1\x0a\xce\x67\xa7\x65\x74\x3a\x01\x4b\x60\xf1\x8b\x48\x24\x9c\xcf\x7d\xaf\x9f\x4e\x80\x5c\x5b\xd3\xf6\x7c\xd9\x15\x41\xad\x6f\xd8\xdd\xbe\x41\x61\x09\x2c\x7e\xe0\x8c\x68\x38\x9f\x21\xd0\x39\xe1\xbc\xc5\xee\x3e\x00\x4e\xf8\x22\x7c\xe0\x55\x86\x61\xe0\x15\x2d\x58\xe0\x35\x8c\xc3\x3e\x74\xbb\x55\xb4\x88\xf5\xe7\xd8\x09\x85\x04\x6d\x88\x95\x42\x43\x62\x8b\x6a\x81\x3a\x82\xb5\x3a\x97\x0a\x8e\x73\xad\x4a\x68\xef\x4c\x20\xd5\xf6\xde\x39\x64\xcc\x20\x67\xda\x38\x90\xa3\xc9\x24\xdd\x3b\x29\x1a\xe7\x4d\x85\xac\xcb\xf1\x92\x67\x2f\x54\xf3\xdd\xaf\x27\x52\x5d\x46\x39\x33\x4e\x33\xe7\xe6\x92\xa2\x03\x4f\x84\x97\xb8\x77\x54\xde\x95\xa6\xbe\x99\x15\x52\x27\xd4\x68\x80\x89\x27\xa6\x59\xc4\x31\xf0\x6a\xb0\x5e\xb9\x26\xd3\xaf\xb3\xa8\x67\x9e\x7e\x2c\x6e\x29\x10\x5b\x40\x07\x0a\x4e\x62\xcc\x24\xa7\xa8\xaa\xce\xa8\xa4\x9a\x6c\x9b\x8a\x9b\xf3\x3f\x18\xbc\x55\x07\x42\xe9\x0b\x21\xaa\xde\xac\xa5\xf8\x9a\x10\xa3\x92\x77\x3d\x11\x78\xb6\xda\xf6\xb8\xd6\xc7\x73\x16\x78\xed\x79\xf5\xea\x5f\x33\xff\x05\x00\x00\xff\xff\x05\x58\x9d\x2d\xde\x0c\x00\x00")

func indexTmplBytes() ([]byte, error) {
	return bindataRead(
		_indexTmpl,
		"index.tmpl",
	)
}

func indexTmpl() (*asset, error) {
	bytes, err := indexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.tmpl", size: 3294, mode: os.FileMode(420), modTime: time.Unix(1495847479, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.tmpl": indexTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.tmpl": &bintree{indexTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

