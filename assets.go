// Code generated by go-bindata.
// sources:
// assets/index.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x57\xdf\x6f\xdb\x36\x10\x7e\xf7\x5f\x71\xd3\x50\x64\x2b\x2c\xc9\x4e\xe2\x26\x56\x64\x61\x5b\xbb\x61\x03\xd6\x75\x40\xbb\x87\x3d\xd2\xe2\xc9\xe2\x42\x91\x1a\x49\xd9\x71\x0d\xff\xef\x03\x45\xfd\xb0\x6c\x25\xed\x5a\xa0\x46\xc9\xef\xbe\xbb\xfb\xee\x78\xa4\xe2\x6f\xde\x7d\x78\xfb\xe9\xef\x3f\x7f\x86\xdc\x14\x3c\x99\xc4\xf6\x07\x38\x11\x9b\x95\x87\xc2\x4b\x26\x93\x38\x47\x42\x93\x09\x40\x6c\x98\xe1\x98\xbc\x67\xc8\x1f\x31\x9c\x07\xb3\x38\x74\x2b\x76\xaf\x40\x43\x20\xcd\x89\xd2\x68\x56\xde\x5f\x9f\x7e\xf1\xef\xbd\x7e\x43\x90\x02\x57\xde\x96\xe1\xae\x94\xca\x78\x90\x4a\x61\x50\x98\x95\xb7\x63\xd4\xe4\x2b\x8a\x5b\x96\xa2\x5f\xff\x67\x0a\x4c\x30\xc3\x08\xf7\x75\x4a\x38\xae\xe6\x8e\x46\x9b\x3d\x47\x30\xfb\x12\x57\x9e\xc1\x27\x13\xa6\x5a\xd7\x3b\x00\xe1\x6b\xc8\x8d\x29\x75\x14\x86\x1b\x66\xf2\x6a\x1d\xa4\xb2\x08\x7f\x93\x82\xa5\xe4\x27\xf6\x99\x54\xe1\x46\x31\xca\xf7\xf0\x3a\xac\xf1\x81\x92\x3b\x38\x00\x65\xba\xe4\x64\x1f\x41\xc6\xf1\xe9\x01\x8e\x6e\x2f\x95\x1c\x0e\xf5\x52\x04\xf3\x76\xf5\x87\x02\x29\x23\xf0\x5d\x41\x9e\x5c\x90\x11\xdc\xde\x63\xf1\x3d\x1c\xea\xed\x13\x52\x6b\xe8\x53\xa6\x30\x35\x4c\x8a\x08\x52\xc9\xab\x42\xb4\x3c\x17\x1e\x66\x30\x03\x52\x19\xd9\x02\x8e\x93\xa1\x3f\x26\xc6\xfd\x59\x12\xdf\x2a\x98\x0f\xa8\xe6\xb3\x57\xbd\xab\x1a\x93\xb1\xec\x0c\x73\x7d\x81\xf9\xb7\x22\xca\xa0\x1a\xa2\x16\xe7\x28\x93\x33\x45\x07\x98\x9b\x9b\xe0\xa6\xfe\x73\x7b\x8e\xcd\x09\xcf\x06\xd0\x45\xef\xb4\x49\xb1\x20\x4c\x74\xe9\x74\x39\x2a\x2c\x1e\x9a\xb5\x82\xa8\x0d\x13\x51\x2b\xd0\xb9\xed\x14\x34\x72\x4c\x8d\x6d\x97\xb2\x32\x53\x58\x57\xc6\xc8\x9e\x32\x93\xc2\x44\x10\x58\xc6\x70\xae\xb0\x80\xab\xf7\x28\xb8\xbc\x9a\xc2\xd5\x3b\x25\x19\x85\x8f\x44\x68\x78\x2f\x45\xbd\xf4\x56\x56\x8a\xa1\x82\x3f\x70\x77\x35\x85\x42\x0a\xa9\x4b\x92\xe2\xc0\xab\x76\x35\xed\x3c\xfc\x53\x69\xc3\xb2\xbd\xdf\xf4\x72\x04\xb5\x89\xbf\x46\xb3\x43\x14\xa3\xa6\x09\x50\xb6\xed\x08\x4a\x42\x29\x13\x9b\x08\x82\x45\x97\xf7\x79\x03\x9c\x36\x9c\x3a\xed\x80\x81\x7e\x9d\x82\xcb\xfb\x57\xad\x7e\xe3\x0d\xd5\xf3\x5d\xdf\x0e\xf8\xfa\x10\x89\x66\x14\x2f\xa9\xe7\xb3\xd9\x38\xb7\x13\x7e\xda\x32\x4c\x81\x28\xc3\x52\x8e\x4d\x65\x3a\xa6\xb5\x54\x14\x95\xaf\x08\x65\x95\x8e\x20\xb8\x5e\x9c\x54\x5b\x56\x86\x33\x81\x11\xcc\x1e\x06\xf0\x93\x85\x5e\xae\xda\x12\x82\xbb\x0b\xd9\x1a\xcf\x27\x22\x35\x3d\x14\xdc\x9c\x43\x83\x66\xe6\x70\xa6\xfb\x10\x87\x23\xa1\xed\x24\x7b\xa4\x77\x8a\x94\x11\xd8\x7f\x1f\x9e\x2b\x7f\x8a\xc2\xa0\x6a\xb7\x09\x67\x1b\xe1\x33\x83\x85\x8e\x40\x1b\x85\x26\xcd\xc7\x02\x38\x3f\x03\xbd\xcc\x5f\x3d\x0b\xce\x88\x3a\xaa\xeb\x17\x0b\xd6\xe1\xed\x34\xf5\x8d\x22\x42\x67\x52\x15\x11\x54\x65\x89\x2a\x25\x1a\x1f\x4e\x01\x75\x3e\x6d\x92\x83\x3c\x38\x51\x1b\xbc\x6c\xea\xfa\xd0\xdd\x9c\x94\xd8\x9e\x48\x5f\xb3\xcf\xd8\x1c\xcb\xa1\x1a\x8e\x78\x18\xd4\xf3\x3e\x1b\x41\xfb\xd3\xde\xcc\xeb\x01\x68\x2d\x39\x1d\xcc\x03\x7f\x87\x6c\x93\x9b\x08\x96\xb3\xd9\x10\x8a\x9c\xb3\x52\x33\x3d\xf4\x2f\xb7\xa8\x32\x2e\x77\x11\xb4\xfb\x6d\x2e\xbb\x9c\x19\xf4\xeb\x03\x1f\x81\x90\xa7\x7d\xd1\x1b\xe5\x8c\xd2\xb3\x41\x10\x50\xa2\x1e\xfd\x8d\x22\xfb\xe9\x58\x29\xd6\x24\x7d\xdc\x28\x59\x09\xea\xa7\x92\x4b\x15\xc1\xb7\xb7\xd9\xe2\x76\xb1\x1c\xe7\xf0\x6d\x94\x9d\xf1\x0b\x16\xcf\x83\xef\x17\xf7\x74\xf9\x66\x58\x4f\xab\x51\xcd\xff\x52\x5c\x78\x8d\x0b\x5c\x3e\x63\x38\xee\x6b\xc4\x64\xcd\x49\xfa\xf8\x92\x9b\x9b\x85\xfd\x3b\xb0\x51\x48\x5f\xb2\xc8\xb2\xbb\xbb\xbb\xeb\x73\x8b\xf1\x88\x46\xb0\x1b\x85\xf8\x62\x41\xde\xdc\xad\xc9\x98\xcd\xb8\x87\x11\xb4\x14\x76\xd2\x8d\xb8\xb0\x12\x2d\xb3\x8c\x2e\x1f\x46\x2b\x3a\x6c\x24\x99\x65\xcf\xd3\x64\x19\xa6\x98\x9e\xd3\x64\x0b\x92\x92\x37\x5d\x9f\x96\x24\x65\x66\x1f\x41\x70\xdb\x32\x03\xc4\x61\xfd\xce\x4a\x26\x71\xe8\x5e\x7d\x93\x78\x2d\xe9\xde\xfe\xda\x0b\xc7\xbd\xc4\x9a\x9b\x22\xe5\x44\xeb\x95\x67\xdf\x3d\x7d\xe5\x9b\x27\x59\x6c\xef\xb9\x1e\xe0\x25\x71\x3e\x1f\x3c\x1c\xf3\x79\x12\x87\x94\x6d\x13\xe7\xd4\x51\x9e\xd2\x5f\xf2\x9c\x0c\x6c\x2f\x39\x1c\x40\x11\xb1\x41\x08\x7e\xb7\x03\xfc\xd8\x3e\x3f\xe2\xf6\x0a\x60\x74\xe5\x69\xe3\x1f\x0e\x10\xfc\x2a\xb5\xb1\x0f\x50\x38\x1e\xbd\x21\xd9\xe1\x00\x2c\x83\xe0\x83\xab\xc8\xf1\x08\xae\x36\x87\x03\x20\xd7\x6e\xc1\xc9\x6c\x57\x04\xb5\x04\x49\x37\x65\xe3\xb2\x25\x6b\xa7\xc3\x05\x9d\x9d\x40\x63\xa6\x00\x36\xae\x1f\x39\x23\xba\x0f\xdd\x0a\x51\x8e\xd1\xf7\x27\xaa\x75\x34\xa0\x8a\x75\x41\x38\x4f\xce\x32\x8d\x43\xb7\x3c\x46\x1e\x87\x8d\x4a\x49\x9f\xe9\xe4\xdc\xab\x9b\xba\x5e\x22\x24\x68\x43\x6c\x49\x34\x64\xb6\xbf\x2c\x51\x97\x94\xab\xd2\x65\x25\x1b\x29\x3e\x22\xcf\x1c\x2a\xb6\x97\x0b\x90\x7a\x77\xe5\xd5\xf3\xb3\xae\x24\x14\x68\x72\x49\x57\xde\x06\x8d\xf7\x5c\x7f\xd9\x3b\x56\x49\xae\x2f\x1b\x6d\xa4\xd5\xfa\x8c\x9b\xe9\xea\x3e\x1a\x74\xb5\x2e\x98\xf1\x9a\x4f\x91\x42\x52\xf4\x60\x4b\x78\x85\x2b\x4f\x15\x5d\x5f\xd8\xc7\xb9\xbb\xd0\x14\x52\x2f\xd1\x68\x80\x89\x2d\xd3\x6c\xcd\x31\x0e\x1d\x61\x2f\x63\x93\xf6\x17\xc2\x70\xcf\xa0\xfe\xd3\xa5\x8d\x81\xd8\xfa\x7b\x50\x72\x92\x62\x2e\x39\x45\xb5\xf2\x6c\x15\xad\x68\xa3\x4d\xdb\x05\xe7\xfd\xdf\x10\xbe\x56\x09\x42\xe9\x88\x14\xf5\x7c\x73\x62\x7c\x49\x8a\x41\x07\x74\x2d\x12\x87\xb6\xfa\x76\xaa\xb8\x29\x32\x89\xc3\x76\xac\x84\xee\xb3\xf3\xbf\x00\x00\x00\xff\xff\xd6\x4c\x9a\xd3\x87\x0e\x00\x00")

func indexTmplBytes() ([]byte, error) {
	return bindataRead(
		_indexTmpl,
		"index.tmpl",
	)
}

func indexTmpl() (*asset, error) {
	bytes, err := indexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.tmpl", size: 3719, mode: os.FileMode(420), modTime: time.Unix(1495856540, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.tmpl": indexTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.tmpl": &bintree{indexTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

