// Code generated by go-bindata.
// sources:
// assets/index.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x57\xdd\x6e\xe3\x36\x13\xbd\xf7\x53\xcc\xa7\x0f\x45\x76\x01\xcb\xb2\xbd\x71\x1c\x2b\xb2\xd0\x62\xb7\x45\x0b\x74\xbb\x05\xba\xbd\xe8\x25\x25\x8e\x24\x36\x14\x29\x90\x54\x1c\xd7\xf0\xbb\x17\xd4\xbf\x62\xc5\x1b\x14\xb9\x90\x42\xce\x9c\x39\x73\x66\x28\x8e\x83\xff\x7d\xfa\xf2\xf1\xeb\x5f\xbf\xff\x08\x99\xc9\x79\x38\x0b\xec\x03\x38\x11\xe9\xde\x41\xe1\x84\xb3\x59\x90\x21\xa1\xe1\x0c\x20\x30\xcc\x70\x0c\x3f\x33\xe4\x8f\xe8\xad\x16\xcb\xc0\xab\x57\xec\x5e\x8e\x86\x40\x9c\x11\xa5\xd1\xec\x9d\x3f\xbf\xfe\xe4\xde\x3b\xfd\x86\x20\x39\xee\x9d\x27\x86\x87\x42\x2a\xe3\x40\x2c\x85\x41\x61\xf6\xce\x81\x51\x93\xed\x29\x3e\xb1\x18\xdd\xea\x9f\x39\x30\xc1\x0c\x23\xdc\xd5\x31\xe1\xb8\x5f\xd5\x30\xda\x1c\x39\x82\x39\x16\xb8\x77\x0c\x3e\x1b\x2f\xd6\xba\xda\x01\xc8\x09\x13\x70\xaa\x5e\x01\x2a\x0c\x1f\x6e\xef\x15\xe6\x0f\xcd\x5a\x4e\x54\xca\x84\x0f\x4b\x20\xa5\x91\xf5\xea\x79\xd6\xf9\xce\x41\x23\xc7\xd8\xd8\xc8\x45\x69\xe6\x10\x95\xc6\xc8\x1e\x32\x91\xc2\xf8\xb0\xb0\x88\xde\x4a\x61\x0e\x37\x9f\x51\x70\x79\x33\x87\x9b\x4f\x4a\x32\x0a\x7f\x10\xa1\xe1\xb3\x14\xd5\xd2\x47\x59\x2a\x86\x0a\x7e\xc3\xc3\xcd\x1c\x72\x29\xa4\x2e\x48\x8c\xa3\xa8\x1a\x63\xc3\x06\x11\x28\xd3\x05\x27\x47\x1f\x12\x8e\xcf\x2d\xeb\xbf\x4b\x6d\x58\x72\x74\x1b\xad\x7c\xa8\x70\xdc\x08\xcd\x01\x51\x4c\xe2\x85\x40\xd9\x53\xcf\x9b\xe3\xb3\x0f\xab\x16\xaf\x20\x94\x32\x91\xfa\xb0\xd8\x74\xda\x34\xfe\xdf\xe7\x48\x19\x81\x77\x39\x79\x76\x87\x02\xbe\xef\xb0\x46\x1a\x77\x2a\xef\xee\xbf\x6b\xd1\xcf\xdf\xc0\x5b\xdf\x8e\xf0\x7a\xc6\x44\x33\x8a\x97\xd0\xab\xe5\x72\x1a\xbb\x2e\xce\xbc\x45\x98\x03\x51\x86\xc5\x1c\x9b\xea\x75\x48\x91\x54\x14\x95\xab\x08\x65\xa5\xf6\x61\xb1\xde\x0c\x3a\x42\x96\x86\x33\x81\x3e\x2c\x1f\x46\xe6\x83\x85\x5e\xae\xca\x13\x16\xdb\x0b\xd9\x9a\xc8\x03\x91\xea\x3e\xab\x9a\x64\x3d\x08\xd7\x82\xaf\x8a\x67\xd0\x92\x33\xfa\x70\x99\x51\x87\x62\xbb\xdb\x35\x8a\x08\x9d\x48\x95\xfb\x50\x16\x05\xaa\x98\x68\x7c\x18\x1a\x10\xce\x52\xe1\x43\x8c\xc2\xa0\x1a\xa2\x2d\x38\x51\x69\xcf\xa9\x4b\xa3\x22\xf5\x61\x40\xca\xb6\xb5\xab\xd9\x3f\xd8\xf4\xf6\x88\x93\x21\xd1\x20\xb1\x46\xcb\x58\x72\x4e\x0a\x8d\x3e\xb4\x6f\x0f\x6f\x11\xbb\xd9\xb4\xed\x5b\x31\xe9\x24\x1e\x94\x7a\x14\x3b\x9b\x83\xa1\x97\x19\x2c\x86\xa0\x43\x11\x38\x26\x66\x24\x41\xad\xca\x58\xd1\xd7\x05\x8b\x24\xa7\xa3\xc3\xee\x1e\x90\xa5\x99\xf1\x61\xb7\x5c\x8e\x54\x59\x50\xa2\x1e\xdd\x54\x91\xe3\xbc\x63\xfa\xa2\x7a\x11\x89\x1f\x53\x25\x4b\x41\xad\x5c\x52\xf9\xf0\xff\xdb\x64\x73\xbb\xd9\x4d\xe3\xb8\x96\x5b\xe7\x7c\xc5\xe3\x75\xe3\xfb\xcd\x3d\xdd\xdd\x8d\x5b\xc0\xd2\x1f\xf2\x54\xbe\x30\x99\x1b\x67\x8c\xd3\x77\x6b\xe1\xae\xde\x5f\xe3\x8b\x6b\xdc\xe0\xee\x15\xc0\x8a\x43\x9b\xfd\x05\x97\x09\x57\x85\xf4\x5a\xb0\x24\xd9\x6e\xb7\xeb\x97\x1e\xd3\x99\x4e\xd8\xa6\x0a\xf1\xaa\xf8\x77\xdb\x88\x4c\xf9\x4c\x47\x98\xb0\x8e\x78\x89\xd7\x02\x6c\x97\x11\xc5\xbb\x0b\x97\x69\xfc\x09\xe3\x23\x72\x2e\x0f\xd7\x25\xa2\xf4\x6e\x37\xe1\xf4\x9a\x4a\x17\xe6\x39\x49\x51\x18\x72\x2d\x48\x94\x6c\x37\x49\x32\xe5\x35\x1d\x65\xc2\x3e\x3e\x92\xab\xa5\xd8\xad\x93\x5d\x72\x77\xe1\x32\x8d\x3f\x61\x1c\x71\x12\x3f\x5e\x0b\xf0\x61\x63\xff\x2e\x7d\xa6\x23\x8c\xad\xad\x7d\xe0\x55\x53\x46\x38\x0b\xbc\x7a\xe6\x99\x05\x91\xa4\x47\xfb\xb4\xf7\x5f\x3d\x87\x34\x17\x57\xcc\x89\xd6\x7b\xa7\x3f\x18\xcd\x30\x12\x50\xf6\x14\x06\xd9\x6a\x34\x26\x65\xab\x30\xf0\xec\x46\x1d\xa4\x86\x18\xc2\x0d\x7c\x4f\x27\x50\x44\xa4\x08\x8b\x5f\x99\x36\x70\x3e\x37\xb4\x83\xf6\xb6\x61\x74\xef\x68\xe3\x9e\x4e\xb0\xf8\x59\x6a\x63\x47\x2b\x38\x9f\x9d\x96\xd1\xe9\x04\x2c\x81\xc5\x17\x61\x2f\x38\x38\x9f\xfb\x6e\x3f\x9d\x00\xb9\xb6\x6b\xed\x09\xb3\x2b\x82\x5a\xef\xb0\xbb\x7f\x83\xc2\x52\x58\xfc\xc0\x19\xd1\x70\x3e\x43\xa0\x73\xc2\x79\x8b\xde\x7d\x02\x9c\xf0\x05\x81\xc0\xab\x0c\xc3\xc0\x2b\x5a\xb0\xc0\x6b\x38\x87\x7d\xe8\x76\xab\x68\x11\xeb\x0f\xb2\x13\x0a\x09\xda\x10\x2b\x86\x86\xc4\x96\xd5\x02\x75\x04\x6b\x7d\x2e\x35\x6c\xb2\xfd\x45\x24\xd2\x5a\xd9\x3d\x7b\x6b\x02\xa9\xb6\xf7\xce\x21\x63\x06\x39\xd3\xc6\x81\x1c\x4d\x26\xe9\xde\x49\xd1\x38\x6f\x2a\x65\x5d\x90\x97\x3c\x7b\xa1\x9a\x2f\x7f\x3d\x93\xea\x32\xca\x99\x71\x9a\x49\x37\x97\x14\x1d\x78\x22\xbc\xc4\xbd\xa3\xf2\xae\x38\xf5\xdd\xac\x90\x3a\xa1\x46\x03\x4c\x3c\x31\xcd\x22\x8e\x81\x57\x83\xf5\xca\x35\x99\x7e\x9b\x45\x3d\xf5\xf4\x83\x71\x4b\x81\xd8\x02\x3a\x50\x70\x12\x63\x26\x39\x45\x55\xf5\x46\x25\xd5\x64\xe3\x54\xdc\x9c\xff\xc0\xe0\xad\x3a\x10\x4a\x5f\x08\x51\xf5\x66\x2d\xc5\xb7\x84\x18\x95\xbc\xeb\x89\xc0\xb3\xd5\xb6\x07\xb6\x3e\xa0\xb3\xc0\x6b\x4f\xac\x57\xff\x9e\xf9\x37\x00\x00\xff\xff\xb2\x76\xd7\xb5\xe0\x0c\x00\x00")

func indexTmplBytes() ([]byte, error) {
	return bindataRead(
		_indexTmpl,
		"index.tmpl",
	)
}

func indexTmpl() (*asset, error) {
	bytes, err := indexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.tmpl", size: 3296, mode: os.FileMode(420), modTime: time.Unix(1495849001, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.tmpl": indexTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.tmpl": &bintree{indexTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

