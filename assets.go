// Code generated by go-bindata.
// sources:
// assets/index.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x57\x4f\x6f\xe3\xb6\x13\xbd\xfb\x53\xcc\x4f\x3f\x14\xd9\x05\x2c\xcb\xf6\xc6\x71\xac\xc8\x42\x8b\xdd\x16\x3d\x74\xbb\x05\x76\x7b\xe8\x91\x12\x47\x12\x1b\x8a\x14\x48\x2a\x8e\x6b\xf8\xbb\x17\xd4\x7f\xc5\x8a\x37\x28\x72\x90\x42\xce\xbc\x79\xf3\x66\x28\x8e\x83\xff\x7d\xfa\xf2\xf1\xdb\x5f\x7f\xfc\x0c\x99\xc9\x79\x38\x0b\xec\x03\x38\x11\xe9\xde\x41\xe1\x84\xb3\x59\x90\x21\xa1\xe1\x0c\x20\x30\xcc\x70\x0c\x3f\x33\xe4\x8f\xe8\xad\x16\xcb\xc0\xab\x57\xec\x5e\x8e\x86\x40\x9c\x11\xa5\xd1\xec\x9d\x3f\xbf\xfd\xe2\xde\x3b\xfd\x86\x20\x39\xee\x9d\x27\x86\x87\x42\x2a\xe3\x40\x2c\x85\x41\x61\xf6\xce\x81\x51\x93\xed\x29\x3e\xb1\x18\xdd\xea\x9f\x39\x30\xc1\x0c\x23\xdc\xd5\x31\xe1\xb8\x5f\xd5\x30\xda\x1c\x39\x82\x39\x16\xb8\x77\x0c\x3e\x1b\x2f\xd6\xba\xda\x01\xc8\x09\x13\x70\xaa\x5e\x01\x2a\x0c\x1f\x6e\xef\x15\xe6\x0f\xcd\x5a\x4e\x54\xca\x84\x0f\x4b\x20\xa5\x91\xf5\xea\x79\xd6\xf9\xce\x41\x23\xc7\xd8\xd8\xc8\x45\x69\xe6\x10\x95\xc6\xc8\x1e\x32\x91\xc2\xf8\xb0\xb0\x88\xde\x4a\x61\x0e\x37\x9f\x51\x70\x79\x33\x87\x9b\x4f\x4a\x32\x0a\x5f\x89\xd0\xf0\x59\x8a\x6a\xe9\xa3\x2c\x15\x43\x05\xbf\xe3\xe1\x66\x0e\xb9\x14\x52\x17\x24\xc6\x51\x54\x8d\xb1\x61\x83\x08\x94\xe9\x82\x93\xa3\x0f\x09\xc7\xe7\x96\xf5\xdf\xa5\x36\x2c\x39\xba\x8d\x56\x3e\x54\x38\x6e\x84\xe6\x80\x28\x26\xf1\x42\xa0\xec\xa9\xe7\xcd\xf1\xd9\x87\x55\x8b\x57\x10\x4a\x99\x48\x7d\x58\x6c\x3a\x6d\x1a\xff\x1f\x73\xa4\x8c\xc0\xbb\x9c\x3c\xbb\x43\x01\xdf\x77\x58\x23\x8d\x3b\x95\x77\xf7\x3f\xb4\xe8\xe7\xef\xe0\xad\x6f\x47\x78\x3d\x63\xa2\x19\xc5\x4b\xe8\xd5\x72\x39\x8d\x5d\x17\x67\xde\x22\xcc\x81\x28\xc3\x62\x8e\x4d\xf5\x3a\xa4\x48\x2a\x8a\xca\x55\x84\xb2\x52\xfb\xb0\x58\x6f\x06\x1d\x21\x4b\xc3\x99\x40\x1f\x96\x0f\x23\xf3\xc1\x42\x2f\x57\xe5\x09\x8b\xed\x85\x6c\x4d\xe4\x81\x48\x75\x9f\x55\x4d\xb2\x1e\x84\x6b\xc1\x57\xc5\x33\x68\xc9\x19\x7d\xb8\xcc\xa8\x43\xb1\xdd\xed\x1a\x45\x84\x4e\xa4\xca\x7d\x28\x8b\x02\x55\x4c\x34\x3e\x0c\x0d\x08\x67\xa9\xf0\x21\x46\x61\x50\x0d\xd1\x16\x9c\xa8\xb4\xe7\xd4\xa5\x51\x91\xfa\x30\x20\x65\xdb\xda\xd5\xec\x1f\x6c\x7a\x7b\xc4\xc9\x90\x68\x90\x58\xa3\x65\x2c\x39\x27\x85\x46\x1f\xda\xb7\x87\xb7\x88\xdd\x6c\xda\xf6\xad\x98\x74\x12\x0f\x4a\x3d\x8a\x9d\xcd\xc1\xd0\xcb\x0c\x16\x43\xd0\xa1\x08\x1c\x13\x33\x92\xa0\x56\x65\xac\xe8\xeb\x82\x45\x92\xd3\xd1\x61\x77\x0f\xc8\xd2\xcc\xf8\xb0\x5b\x2e\x47\xaa\x2c\x28\x51\x8f\x6e\xaa\xc8\x71\xde\x31\x7d\x51\xbd\x88\xc4\x8f\xa9\x92\xa5\xa0\x56\x2e\xa9\x7c\xf8\xff\x6d\xb2\xb9\xdd\xec\xa6\x71\x5c\xcb\xad\x73\xbe\xe2\xf1\xba\xf1\xfd\xe6\x9e\xee\xee\xc6\x2d\x60\xe9\x0f\x79\x2a\x5f\x98\xcc\x8d\x33\xc6\xe9\xbb\xb5\x70\x57\xef\xaf\xf1\xc5\x35\x6e\x70\xf7\x0a\x60\xc5\xa1\xcd\xfe\x82\xcb\x84\xab\x42\x7a\x2d\x58\x92\x6c\xb7\xdb\xf5\x4b\x8f\xe9\x4c\x27\x6c\x53\x85\x78\x55\xfc\xbb\x6d\x44\xa6\x7c\xa6\x23\x4c\x58\x47\xbc\xc4\x6b\x01\xb6\xcb\x88\xe2\xdd\x85\xcb\x34\xfe\x84\xf1\x11\x39\x97\x87\xeb\x12\x51\x7a\xb7\x9b\x70\x7a\x4d\xa5\x0b\xf3\x9c\xa4\x28\x0c\xb9\x16\x24\x4a\xb6\x9b\x24\x99\xf2\x9a\x8e\x32\x61\x1f\x1f\xc9\xd5\x52\xec\xd6\xc9\x2e\xb9\xbb\x70\x99\xc6\x9f\x30\x8e\x38\x89\x1f\xaf\x05\xf8\xb0\xb1\x7f\x97\x3e\xd3\x11\xc6\xd6\xd6\x3e\xf0\xaa\x29\x23\x9c\x05\x5e\x3d\xf3\xcc\x82\x48\xd2\xa3\x7d\xda\xfb\xaf\x9e\x43\x9a\x8b\x2b\xe6\x44\xeb\xbd\xd3\x1f\x8c\x66\x18\x09\x28\x7b\x0a\x83\x6c\x35\x1a\x93\xb2\x55\x18\x78\x76\xa3\x0e\x52\x43\x0c\xe1\x06\xbe\xa7\x13\x28\x22\x52\x84\xc5\x6f\x4c\x1b\x38\x9f\x1b\xda\x41\x7b\xdb\x30\xba\x77\xb4\x71\x4f\x27\x58\xfc\x2a\xb5\xb1\xa3\x15\x9c\xcf\x4e\xcb\xe8\x74\x02\x96\xc0\xe2\x8b\xb0\x17\x1c\x9c\xcf\x7d\xb7\x9f\x4e\x80\x5c\xdb\xb5\xf6\x84\xd9\x15\x41\xad\x77\xd8\xdd\xbf\x41\x61\x29\x2c\x7e\xe2\x8c\x68\x38\x9f\x21\xd0\x39\xe1\xbc\x45\xef\x3e\x01\x4e\xf8\x82\x40\xe0\x55\x86\x61\xe0\x15\x2d\x58\xe0\x35\x9c\xc3\x3e\x74\xbb\x55\xb4\x88\xf5\x07\xd9\x09\x85\x04\x6d\x88\x15\x43\x43\x62\xcb\x6a\x81\x3a\x82\xb5\x3e\x97\x1a\x36\xd9\x7e\x45\x9e\x58\x2b\xbb\x67\x6f\x4d\x20\xd5\xf6\xde\x39\x64\xcc\x20\x67\xda\x38\x90\xa3\xc9\x24\xdd\x3b\x29\x1a\xe7\x4d\xa5\xac\x0b\xf2\x92\x67\x2f\x54\xf3\xe5\xaf\x67\x52\x5d\x46\x39\x33\x4e\x33\xe9\xe6\x92\xa2\x03\x4f\x84\x97\xb8\x77\x54\xde\x15\xa7\xbe\x9b\x15\x52\x27\xd4\x68\x80\x89\x27\xa6\x59\xc4\x31\xf0\x6a\xb0\x5e\xb9\x26\xd3\xef\xb3\xa8\xa7\x9e\x7e\x30\x6e\x29\x10\x5b\x40\x07\x0a\x4e\x62\xcc\x24\xa7\xa8\xaa\xde\xa8\xa4\xea\xaa\x3b\x26\xe6\xfc\x87\xf0\x6f\x15\x81\x50\xfa\x42\x85\xaa\x31\x6b\x1d\xbe\xa7\xc2\xa8\xde\x5d\x43\x04\x9e\x2d\xb5\x3d\xad\xf5\xe9\x9c\x05\x5e\x7b\x5c\xbd\xfa\xc7\xcc\xbf\x01\x00\x00\xff\xff\xe8\x3b\x92\xcc\xdd\x0c\x00\x00")

func indexTmplBytes() ([]byte, error) {
	return bindataRead(
		_indexTmpl,
		"index.tmpl",
	)
}

func indexTmpl() (*asset, error) {
	bytes, err := indexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.tmpl", size: 3293, mode: os.FileMode(420), modTime: time.Unix(1495855114, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.tmpl": indexTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.tmpl": &bintree{indexTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

